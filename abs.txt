import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;

public class ElectricityConsumptionAnalysis {

    public static class ElectricityConsumptionMapper extends Mapper {
        @Override
        protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String[] fields = value.toString().split(",");
            if (fields.length == 2) {
                try {
                    int year = Integer.parseInt(fields[0].trim());
                    double avgConsumption = Double.parseDouble(fields[1].trim());
                    context.write(new IntWritable(year), new DoubleWritable(avgConsumption));
                } catch (NumberFormatException e) {
                    // Handle parsing errors if necessary
                }
            }
        }
    }

    public static class ElectricityConsumptionReducer extends Reducer {
        private static final double MAX_CONSUMPTION_THRESHOLD = 30.0;

        @Override
        protected void reduce(IntWritable key, Iterable values, Context context)
                throws IOException, InterruptedException {
            for (DoubleWritable val : values) {
                if (val.get() > MAX_CONSUMPTION_THRESHOLD) {
                    context.write(key, val);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: ElectricityConsumptionAnalysis 
 ");
            System.exit(-1);
        }

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Electricity Consumption Analysis");

        job.setJarByClass(ElectricityConsumptionAnalysis.class);
        job.setMapperClass(ElectricityConsumptionMapper.class);
        job.setReducerClass(ElectricityConsumptionReducer.class);

        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(DoubleWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

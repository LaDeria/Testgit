import java.io.IOException;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;

public class BT1 {

    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {
        public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
            String[] splittedValues = value.toString().split("\\s+");
            String currentYear = splittedValues[0];

            // Chỉ lấy các giá trị tiêu thụ điện từ trường thứ hai đến cuối
            for (int i = 1; i < splittedValues.length; i++) {
                int consumption = Integer.parseInt(splittedValues[i]);
                output.collect(new Text(currentYear), new IntWritable(consumption));
            }
        }
    }

    public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
            int maxConsumption = Integer.MIN_VALUE;

            // Tìm giá trị lớn nhất cho mỗi năm
            while (values.hasNext()) {
                int current = values.next().get();
                if (current > maxConsumption) {
                    maxConsumption = current;
                }
            }

            // Chỉ xuất ra nếu giá trị lớn hơn hoặc bằng 30
            if (maxConsumption >= 30) {
                output.collect(key, new IntWritable(maxConsumption));
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: BT1 <input path> <output path>");
            System.exit(-1);
        }

        JobConf conf = new JobConf(BT1.class);
        conf.setJobName("BT1");
        conf.setOutputKeyClass(Text.class);
        conf.setOutputValueClass(IntWritable.class);
        conf.setMapperClass(Map.class);
        conf.setCombinerClass(Reduce.class);
        conf.setReducerClass(Reduce.class);
        conf.setInputFormat(TextInputFormat.class);
        conf.setOutputFormat(TextOutputFormat.class);

        // Thiết lập đường dẫn đầu vào và đầu ra từ tham số dòng lệnh
        FileInputFormat.setInputPaths(conf, new Path(args[0]));
        FileOutputFormat.setOutputPath(conf, new Path(args[1]));

        // Chạy job
        JobClient.runJob(conf);
    }
}

import java.io.IOException;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ElectricityConsumptionAnalysis {

    // Mapper Class
    public static class YearMapper extends Mapper<LongWritable, Text, Text, DoubleWritable> {
        private Text year = new Text();
        private DoubleWritable consumption = new DoubleWritable();

        @Override
        protected void map(LongWritable key, Text line, Context context) throws IOException, InterruptedException {
            String[] fields = line.toString().split("\\s+"); // Phân tách dữ liệu bằng khoảng trắng
            if (fields.length > 1) {
                year.set(fields[0]); // Lấy năm từ trường đầu tiên
                try {
                    // Lấy mức tiêu thụ điện từ các trường thứ hai đến cuối
                    for (int i = 1; i < fields.length; i++) {
                        consumption.set(Double.parseDouble(fields[i]));
                        // Gửi ra cặp key-value nếu mức tiêu thụ lớn hơn 30
                        if (consumption.get() > 30) {
                            context.write(year, consumption);
                        }
                    }
                } catch (NumberFormatException e) {
                    // Xử lý lỗi nếu không thể chuyển đổi giá trị
                    System.err.println("Error parsing consumption value: " + fields[i]);
                }
            }
        }
    }

    // Reducer Class
    public static class ConsumptionReducer extends Reducer<Text, DoubleWritable, Text, DoubleWritable> {
        @Override
        protected void reduce(Text key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException {
            double maxConsumption = Double.NEGATIVE_INFINITY; // Khởi tạo giá trị tối thiểu

            for (DoubleWritable val : values) {
                // Tìm giá trị lớn nhất cho mỗi năm
                if (val.get() > maxConsumption) {
                    maxConsumption = val.get();
                }
            }

            // Chỉ xuất ra nếu giá trị lớn hơn 30
            if (maxConsumption > 30) {
                context.write(key, new DoubleWritable(maxConsumption)); // Xuất cặp key-value
            }
        }
    }

    // Main Class
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: ElectricityConsumptionAnalysis <input path> <output path>");
            System.exit(-1);
        }

        Job job = Job.getInstance();
        job.setJarByClass(ElectricityConsumptionAnalysis.class);
        job.setJobName("Electricity Consumption Analysis");

        job.setMapperClass(YearMapper.class);
        job.setReducerClass(ConsumptionReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(DoubleWritable.class);

        FileInputFormat.setInputPaths(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
